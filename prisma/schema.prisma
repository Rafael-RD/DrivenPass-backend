// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int          @id @default(autoincrement())
  name        String
  email       String       @unique
  password    String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  credentials Credential[]
  notes       Note[]
  cards       Card[]
  wifis       Wifi[]
  licence     Licence[]
}

model Credential {
  id        Int      @id @default(autoincrement())
  title     String
  url       String
  username  String
  password  String
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, title])
}

model Note {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, title])
}

model Card {
  id         Int      @id @default(autoincrement())
  title      String
  number     String
  owner      String
  cvv        String
  expiration String
  password   String
  virtual    Boolean
  type       CardType
  userId     Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])

  @@unique([userId, title])
}

enum CardType {
  CREDIT
  DEBIT
  BOTH
}

model Wifi {
  id        Int      @id @default(autoincrement())
  title     String
  name      String
  password  String
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, title])
}

model Licence {
  id        Int      @id @default(autoincrement())
  title     String
  name      String
  key       String
  version   String
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, title])
}
